

group = 'small-demo-backend'
version = '0.1'
sourceCompatibility = JavaVersion.VERSION_17

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    implementation project(":small-demo-common")
    implementation group: 'org.apache.poi', name: 'poi-excelant', version: '4.1.0'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.1'
    implementation group: 'org.apache.poi', name: 'ooxml-schemas', version: '1.4'
    implementation group: 'org.apache.poi', name: 'poi-scratchpad', version: '5.2.0'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'com.aliyun.oss:aliyun-sdk-oss:3.15.1'
    // springSecurity
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // hutool
//    implementation 'cn.hutool:hutool-all-4.5.7'

    // JWT
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    implementation 'org.aspectj:aspectjrt:1.9.9.1'

    implementation 'commons-httpclient:commons-httpclient:3.1'

    implementation 'com.squareup.okhttp3:okhttp:3.10.0'

    implementation 'com.github.kevinsawicki:http-request:6.0'

    implementation 'com.aliyun.openservices:ons-client:1.8.8.5.Final'

    implementation 'com.baomidou:dynamic-datasource-spring-boot-starter:3.6.1'

    implementation 'org.apache.httpcomponents:httpclient:4.5.13'

    implementation 'org.apache.httpcomponents:httpcore:4.4.14'

    // https://mvnrepository.com/artifact/com.xuxueli/xxl-job-core
    implementation (group: 'com.xuxueli', name: 'xxl-job-core', version: '2.4.0') {
        //org.codehaus.groovy:groovy:3.0.10
        exclude group: 'org.apache.groovy', module: 'groovy'
    }
    
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }

        groovy {
            srcDirs = ['src/main/groovy']
        }

        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

jar.enabled = false

bootJar {
    manifest {
        attributes 'Start-Class': 'com.xhh.smalldemobackend.SmallDemoBackendApplication'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// 任务2: 自定义打包（跳过启动类并排除指定包）
task customBootJar(type: org.springframework.boot.gradle.tasks.bundling.BootJar) {
    archiveClassifier = ''  // 与bootJar同名
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // 关键配置：跳过启动类
    mainClass = 'invalid'  // 设置为无效值以绕过 Spring Boot 检测
    classpath = sourceSets.main.runtimeClasspath

    // 排除指定包或者指定class）
    exclude(
//            'com/xhh/smalldemobackend/service/env/*.class',
//            'com/xhh/smalldemobackend/service/excel/*.class'
    )

    // 清理 Manifest 中的 Spring Boot 启动属性
    manifest {
        attributes.clear()
        attributes.put('Main-Class', 'invalid')
    }

    dependsOn bootJar  // 确保 bootJar 先执行
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(customBootJar)) {
        bootJar.enabled = false
    }
}

tasks.named('test') {
    useJUnitPlatform()
}